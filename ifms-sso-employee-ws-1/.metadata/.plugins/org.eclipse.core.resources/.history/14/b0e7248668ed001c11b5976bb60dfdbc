/**
 * 
 */
package in.ifms.employee.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import in.ifms.employee.constant.ActionType;
import in.ifms.employee.constant.ApiStatus;
import in.ifms.employee.constant.IFMSResponseCode;
import in.ifms.employee.dto.EmployeeDTO;
import in.ifms.employee.entity.Employee;
import in.ifms.employee.exception.IfmsBaseException;
import in.ifms.employee.repository.EmployeeRepository;
import in.ifms.employee.response.IFMSResponse;

/**
 * @author Sharat Pradhan
 *
 */
@Component
public class EmployeeServiceImpl implements EmployeeService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

	@Autowired
	private EmployeeRepository employeeRepository;

	/**
	 * 
	 */
	public EmployeeServiceImpl() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public IFMSResponse getEmployeeById(Integer employeeId) {
		// adding default response message
		IFMSResponse ifmsResponse = new IFMSResponse(ApiStatus.FAILED,
				IFMSResponseCode.FAILURE);
		EmployeeDTO employeeDTO = new EmployeeDTO();
		Optional<Employee> employeeOptional = null;
		/*
		 * the following block gets executed when passed save as type of operation to be
		 * performed with the given employee details
		 */
		if (employeeId != null) {
			// block for saving or creating a new employee
			employeeOptional = employeeRepository.findById(employeeId);
			if (employeeOptional.isPresent()) {
				Employee employee = employeeOptional.get();
				employeeDTO.setEmployeeId(employee.getEmployeeId());
				employeeDTO.setEmployeeName(employee.getEmployeeName());
				employeeDTO.setEmail(employee.getEmail());
				employeeDTO.setPhoneNum(employee.getPhoneNum());
				ifmsResponse.setData(employeeDTO);
			} else {
				LOGGER.error("Employee with the employee ID :: " + employeeId + " doesn't exist");
				ifmsResponse.setResponseCode(IFMSResponseCode.INVALID_EMPLOYEE);
				return ifmsResponse;
			}
		} else {
			LOGGER.error("Invalid Data check for null values ");
			return ifmsResponse;
		}
		// setting the success response code
		ifmsResponse.setResponseStatus(ApiStatus.SUCCESS);
		ifmsResponse.setResponseCode(IFMSResponseCode.SUCCESS);
		LOGGER.info("Employee with the employeeId :: [" + employeeDTO.getEmployeeId() + "] retrieved");
		return ifmsResponse;
	}

	@Override
	public IFMSResponse getEmployeeList() {
		// adding default response message
		IFMSResponse ifmsResponse = new IFMSResponse(ApiStatus.FAILED,
				IFMSResponseCode.FAILURE);
		List<EmployeeDTO> employeeDTOList = new ArrayList<>();
		List<Employee> employeeList = employeeRepository.findAll();

		if (employeeList != null && employeeList.size() != 0) {
			ifmsResponse.setEmployeeList(new ArrayList<>());
			EmployeeDTO employeeDTOTemp = new EmployeeDTO();
			for (Employee employee : employeeList) {
				if (employee != null) {
					employeeDTOTemp = new EmployeeDTO();
					employeeDTOTemp.setEmployeeId(employee.getEmployeeId());
					employeeDTOTemp.setEmployeeName(employee.getEmployeeName());
					employeeDTOTemp.setEmail(employee.getEmail());
					employeeDTOTemp.setPhoneNum(employee.getPhoneNum());
					// add to dto list
					employeeDTOList.add(employeeDTOTemp);
				}
			}
			ifmsResponse.setEmployeeList(employeeDTOList);
		} else {
			LOGGER.error("Invalid Data check for null values ");
			return ifmsResponse;
		}
		// setting the success response code
		ifmsResponse.setResponseStatus(ApiStatus.SUCCESS);
		ifmsResponse.setResponseCode(IFMSResponseCode.SUCCESS);
		LOGGER.info("Employees list successfully retrieved");
		return ifmsResponse;
	}

	@Override
	@Transactional
	public IFMSResponse saveOrUpdate(EmployeeDTO employeeDTO) {

		// adding default response message
		IFMSResponse ifmsResponse = new IFMSResponse(ApiStatus.FAILED,
				IFMSResponseCode.FAILURE);
		Employee employee = null;
		/*
		 * the following block gets executed when passed save as type of operation to be
		 * performed with the given employee details
		 */
		if (employeeDTO != null && employeeDTO.getType() != null && employeeDTO.getType().strip() != "") {
			// block for saving or creating a new employee
			if (employeeDTO.getType().equalsIgnoreCase(ActionType.CREATE.getType())
					&& employeeDTO.getEmployeeName() != null && employeeDTO.getEmail() != null
					&& employeeDTO.getPhoneNum() != null) {
				LOGGER.info("Employee with the details :: " + employeeDTO.toString());
				employee = new Employee();
				employee.setEmail(employeeDTO.getEmail());
				employee.setEmployeeName(employeeDTO.getEmployeeName());
				employee.setPhoneNum(employeeDTO.getPhoneNum());
				// save from the repository
				try {
					employeeRepository.save(employee);
					LOGGER.info("Employee with the employeeId :: [" + employee.getEmployeeId() + "] created");
					ifmsResponse.setResponseStatus(ApiStatus.SUCCESS);
					ifmsResponse.setResponseCode(IFMSResponseCode.SUCCESS);

				} catch (IfmsBaseException ifmsBaseException) {
					LOGGER.error("Exception updating employee with employee ID :: [" + employeeDTO.getEmployeeId(),
							ifmsBaseException.getMessage());
					throw new IfmsBaseException(""+ifmsBaseException.getMessage());
				}
			} else if (employeeDTO.getType().equalsIgnoreCase(ActionType.UPDATE.getType())) {
				// block for updating existing employee
				// check whether employee id is valid or not
				Optional<Employee> employeeOptional = employeeRepository.findById(employeeDTO.getEmployeeId());
				if (employeeOptional.isPresent()) {
					employee = employeeOptional.get();
					employee.setEmployeeId(employee.getEmployeeId());
					// ignoring the null values
					if (employeeDTO.getEmployeeName() != null && employeeDTO.getEmployeeName().strip() != "") {
						employee.setEmployeeName(employeeDTO.getEmployeeName());
					}
					if (employeeDTO.getEmail() != null && employeeDTO.getEmail().strip() != "") {
						employee.setEmail(employeeDTO.getEmail());
					}
					if (employeeDTO.getPhoneNum() != null && employeeDTO.getPhoneNum().strip() != "") {
						employee.setPhoneNum(employeeDTO.getPhoneNum());
					}

					try {
						employeeRepository.saveAndFlush(employee);
						LOGGER.info("Employee with the employeeId :: [" + employee.getEmployeeId() + "] updated");
						ifmsResponse.setResponseCode(IFMSResponseCode.EMP_SUCCESS_UPDATE.getCode());
						ifmsResponse.setResponseMessage(IFMSResponseCode.EMP_SUCCESS_UPDATE.getMessage());
					} catch (IfmsBaseException ifmsBaseException) {
						LOGGER.error("Exception updating employee with employee ID :: [" + employeeDTO.getEmployeeId(),
								ifmsBaseException.getMessage());
					}
				} else {
					LOGGER.error(
							"Employee with the employee ID :: [" + employeeDTO.getEmployeeId() + "] doesn't exist");
					ifmsResponse.setResponseCode(IFMSResponseCode.INVALID_EMPLOYEE.getCode());
					ifmsResponse.setResponseMessage(IFMSResponseCode.INVALID_EMPLOYEE.getMessage());
					return ifmsResponse;
				}

			} else {
				LOGGER.error("Invalid Data check for null values ");
				return ifmsResponse;
			}

		} else {
			LOGGER.error("Invalid request type :: " + employeeDTO.getType());
			return ifmsResponse;
		}
		return ifmsResponse;
	}

	@Override
	public IFMSResponse removeEmployeeById(Integer employeeId) {
		EmployeeDTO employeeDTO = new EmployeeDTO();
		// adding default response message
		IFMSResponse ifmsResponse = new IFMSResponse(ApiStatus.FAILED,
				IFMSResponseCode.FAILURE);
		Optional<Employee> employeeOptional = null;
		/*
		 * the following block gets executed when passed save as type of operation to be
		 * performed with the given employee details
		 */
		if (employeeId != null) {
			// block for saving or creating a new employee
			employeeOptional = employeeRepository.findById(employeeId);
			if (employeeOptional.isPresent()) {
				try {
					employeeRepository.deleteById(employeeId);
					// setting the success response code
					ifmsResponse.setResponseStatus(ApiStatus.SUCCESS);
					ifmsResponse.setResponseCode(IFMSResponseCode.EMP_SUCCESS_DELETE);
					LOGGER.info("Employee with the employeeId :: [" + employeeId + "] deleted");
				} catch (IfmsBaseException ifmsBaseException) {
					LOGGER.error("Exception deleting employee with employee ID :: [" + employeeDTO.getEmployeeId(),
							ifmsBaseException.getMessage());
				}

			} else {
				LOGGER.error("Employee with the employee ID :: " + employeeId + " doesn't exist");
				ifmsResponse.setResponseCode(IFMSResponseCode.INVALID_EMPLOYEE.getCode());
				ifmsResponse.setResponseMessage(IFMSResponseCode.INVALID_EMPLOYEE.getMessage());
				return ifmsResponse;
			}
		} else {
			LOGGER.error("Invalid Data check for null values ");
			return ifmsResponse;
		}

		return ifmsResponse;

	}

}
