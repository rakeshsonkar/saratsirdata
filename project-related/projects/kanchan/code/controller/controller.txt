package com.bfc.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.bfc.constant.ApiPath;
import com.bfc.service.BfcService;

import com.bfc.exception.ResourceNotFoundException;

import com.bfc.constant.ApiStatus;
import com.bfc.constant.ApiStatusCode;
import com.bfc.entity.MStEventCategory;
import com.bfc.response.ApiResponse;

@RestController
@RequestMapping(path=ApiPath.API_BASE_PATH_V1)

public class BfcController {

	@Autowired
	BfcService bfcservice;
	
	
	@RequestMapping(path=ApiPath.BFC_GET,method=RequestMethod.GET)
	public ResponseEntity<ApiResponse> getMstEvenetCategory()
	{
		List<MStEventCategory> mstEventCategory= bfcservice.fetchMstEventDetail();	
		return new ResponseEntity<ApiResponse>(new ApiResponse(ApiStatus.SUCCESS,ApiStatusCode.SUCCESSCODE.getstatusCode(),"record successfully fetched",mstEventCategory),
				HttpStatus.OK);		
		
		
		
	}



 @RequestMapping(path = ApiPath.BFC_SAVE, method = RequestMethod.POST)
public ResponseEntity<ApiResponse> saveEventMgmtDetails(@Validated @RequestBody MStEventCategory mstEventCategory) {
	// call the service layer
	try {
		MStEventCategory mStEventCategoryListsave = bfcservice.saveUserAppDetails(mstEventCategory);
		return new ResponseEntity<>(new ApiResponse(ApiStatus.SUCCESS, ApiStatusCode.SUCCESSCODE.getstatusCode(),
				" record successfully inserted", mStEventCategoryListsave), HttpStatus.OK);
	} catch (Exception e) {
		return new ResponseEntity<>(new ApiResponse(ApiStatus.FAILED, ApiStatusCode.FAILURECODE.getstatusCode(),
				" error while saving the application data"), HttpStatus.INTERNAL_SERVER_ERROR);
	}
 }
 @RequestMapping(path = ApiPath.BFC_UPDATE, method = RequestMethod.POST)
	public ResponseEntity<ApiResponse> updateEventMgmtDetails(@Validated @RequestBody MStEventCategory mstEventCategory)
			throws Exception {
		try {
			Long id = mstEventCategory.getMSTEVENTCATEGORYID();
			MStEventCategory updatedMStEventCategory = bfcservice.updateMstEventMgmtDetails(id, mstEventCategory);
			return new ResponseEntity<>(new ApiResponse(ApiStatus.SUCCESS, ApiStatusCode.SUCCESSCODE.getstatusCode(),
					" record successfully updated", updatedMStEventCategory), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(
					new ApiResponse(ApiStatus.SUCCESS, ApiStatusCode.SUCCESSCODE.getstatusCode(),
							" error while updating the record", e.getLocalizedMessage()),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
 }
 @RequestMapping(path = ApiPath.BFC_DELETE, method = RequestMethod.POST)
	public ResponseEntity<ApiResponse> deleteUserAppDetails(@Validated @RequestBody MStEventCategory mstEventCategory)
			throws ResourceNotFoundException {
		try {
			Long id = mstEventCategory.getMSTEVENTCATEGORYID();
		bfcservice.deleteMstEventDetails(id);
			return new ResponseEntity<>(new ApiResponse(ApiStatus.SUCCESS, ApiStatusCode.SUCCESSCODE.getstatusCode(),
					" record successfully deleted"), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(new ApiResponse(ApiStatus.FAILED, ApiStatusCode.FAILURECODE.getstatusCode(),
					" exception occure while deleting the record"), HttpStatus.OK);
		}
	}
	
}
	
	


